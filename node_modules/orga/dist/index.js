import { withDefault } from './options.js';
import { parser as _parser } from './parse/index.js';
import { parse as parseTimestamp } from './timestamp.js';
import { tokenize as _tokenize } from './tokenize/index.js';
export * from './types.js';
export { parseTimestamp };
export const tokenize = (text, options = {}) => {
    return _tokenize(text, withDefault(options));
};
export const parse = (text, options = {}) => {
    const parser = makeParser(text, options);
    return parser.parse();
};
export function makeParser(text, options = {}) {
    const { range, ..._options } = withDefault(options);
    const start = range?.start;
    const lexer = tokenize(text, {
        ..._options,
        range: start ? { start, end: Infinity } : undefined,
    });
    return _parser(lexer, { ..._options, range });
}
