import type { Node, Parent } from 'unist';
import type { Predicate } from './index.js';
import type { Lexer } from '../tokenize/index.js';
import { Attributes, Document } from '../types.js';
import { ParserOptions } from '../options.js';
export interface Context {
    enter: <N extends Parent>(node: N) => N;
    exit: (predicate: Predicate, strict?: boolean) => Parent | void;
    push: (node: Node) => void;
    save: () => void;
    restore: () => void;
    addProp: (key: string, value: string) => void;
    exitTo: (predicate: Predicate) => Parent | void;
    exitAll: (predicate: Predicate) => Parent | void;
    /** shorthand for lexer.eat and push it **/
    consume: () => void;
    /** shorthand for lexer.eat **/
    discard: () => void;
    within: (predicate: Predicate) => boolean;
    attributes: Attributes;
    readonly parent: Parent;
    readonly level: number;
    readonly tree: Document;
    readonly lexer: Lexer;
    readonly state: string;
    readonly options: ParserOptions;
}
export declare function createContext(lexer: Lexer, options: ParserOptions): Context;
