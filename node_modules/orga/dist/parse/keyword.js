import parseSymbols from './_parseSymbols.js';
import _primitive from './_primitive.js';
const AFFILIATED_KEYWORDS = ['caption', 'header', 'name', 'plot', 'results'];
const keyword = (token, context) => {
    const { push, lexer, addProp } = context;
    const key = token.key.toLowerCase();
    const { value } = token;
    if (key === 'html') {
        push({ type: 'html', value, position: token.position });
    }
    else if (key === 'jsx') {
        push({ type: 'jsx', value, position: token.position });
    }
    else {
        if (AFFILIATED_KEYWORDS.includes(key)) {
            context.attributes[key] = _primitive(value);
        }
        else if (key.startsWith('attr_')) {
            context.attributes[key] = {
                ...context.attributes[key],
                ...parseSymbols(value),
            };
        }
        else if (key === 'todo') {
            lexer.addInBufferTodoKeywords(value);
        }
        else {
            addProp(key, value);
        }
        push(token);
    }
    // if (AFFILIATED_KEYWORDS.includes(key)) {
    //   context.attributes[key] = _primitive(value)
    // } else if (key.startsWith('attr_')) {
    //   context.attributes[key] = {
    //     ...(context.attributes[key] as { [key: string]: Primitive }),
    //     ...parseSymbols(value),
    //   }
    // } else if (key === 'todo') {
    //   lexer.addInBufferTodoKeywords(value)
    // } else if (key === 'html') {
    //   push({ type: 'html', value } as HTML)
    // } else if (key === 'jsx') {
    //   push({ type: 'jsx', value } as JSX)
    // } else {
    //   addProp(key, value)
    // }
    lexer.eat();
};
export default keyword;
// export default (context: Context) => {
//   const { push, lexer } = context
//   const token = lexer.peek()
//   if (token.type !== 'keyword') return
//   lexer.eat()
// }
